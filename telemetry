// Function to check telemetry consent and show popup if needed
async function checkTelemetryConsent() {
    const result = await chrome.storage.local.get('telemetryConsent');
    
    // If 'telemetryConsent' doesn't exist (i.e., no decision made yet), show the popup
    if (!result.telemetryConsent) {
        showTelemetryPopup();  // Show the popup
    } else {
        console.log('Telemetry consent already given:', result.telemetryConsent);
        if (result.telemetryConsent) {
            initAnalytics();  // Initialize analytics if consent is given
        }
    }
}

// Function to show the telemetry consent popup
function showTelemetryPopup() {
    const popup = document.getElementById('telemetry-popup');
    popup.style.display = 'flex';  // Show the popup

    // Log when the popup is shown (for debugging purposes)
    console.log("Telemetry consent popup shown.");
}

// Function to handle user consent choice
function handleTelemetryConsent(choice) {
    // Save the user's decision in local storage
    chrome.storage.local.set({ telemetryConsent: choice });

    // Initialize analytics if consent is given
    if (choice) {
        initAnalytics();
    }

    // Hide the popup after the choice is made
    hideTelemetryPopup();
}

// Function to hide the popup
function hideTelemetryPopup() {
    const popup = document.getElementById('telemetry-popup');
    popup.style.display = 'none';  // Hide the popup
}

// Function to get or create a unique ClientID
async function getOrCreateClientID() {
    const result = await chrome.storage.local.get('ClientID');
    let ClientID = result.ClientID;

    if (!ClientID) {
        ClientID = crypto.randomUUID();
        await chrome.storage.local.set({ ClientID });
    }
    return ClientID;
}

// Initialize Google Analytics (or another analytics platform)
function initAnalytics() {
    window.dataLayer = window.dataLayer || [];
    function gtag() {
        dataLayer.push(arguments);
    }
    gtag('js', new Date());
    gtag('config', 'G-XXXXXXXX'); // Replace with your actual Google Analytics Measurement ID
}

// Track custom events
function trackEvent(eventCategory, eventLabel, value) {
    gtag('event', eventCategory, {
        'eventCategory': eventCategory,
        'eventLabel': eventLabel,
        'value': value
    });
}

// Function to track the state of all checkboxes
function trackCheckboxStates() {
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');

    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const checkboxId = checkbox.id;
            const checkboxState = checkbox.checked ? 'ON' : 'OFF';

            console.log(`Checkbox ${checkboxId} is ${checkboxState}`);
            trackEvent('Weda-Helper Options', checkboxId, checkboxState === 'ON' ? 1 : 0);
        });
    });
}

// Wait for the page to load, then check telemetry consent
document.addEventListener('DOMContentLoaded', function() {
    checkTelemetryConsent();  // Check telemetry consent and show popup if needed
    trackCheckboxStates();    // Initialize checkbox tracking

    // Add event listeners to buttons in the popup
    document.getElementById('allow-telemetry').addEventListener('click', () => handleTelemetryConsent(true));
    document.getElementById('deny-telemetry').addEventListener('click', () => handleTelemetryConsent(false));
});

// Expose trackEvent globally
window.trackEvent = trackEvent;
